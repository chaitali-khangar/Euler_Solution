# Problem no 12
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?
require 'prime'
def find_divisor(number)
	primes, powers = number.prime_division.transpose
	return [1] if powers.nil?
	exponents = powers.map{|i| (0..i).to_a}
    divisors = exponents.shift.product(*exponents).map do |powers|
    primes.zip(powers).map{|prime, power| prime ** power}.inject(:*)
  end
  divisors
end

def triangle_number(times)
  divisor_count = 1
  num = 1
  triangle_number = num
  loop do
  	if divisor_count > times
  		puts "Triangle no is #{triangle_number} and divisor count is #{divisor_count}"
  		break 
  	end
  	triangle_number = (1..num).inject(:+)
  	divisor_count = find_divisor(triangle_number).count if num > 1
  	num = num.next
  end
end

triangle_number(500)